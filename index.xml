<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>What if...</title>
    <link>http://blog.ruthearle.com/</link>
    <description>Recent content on What if...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Ruth Earle</copyright>
    <lastBuildDate>Sat, 30 Apr 2016 14:04:32 +0100</lastBuildDate>
    <atom:link href="http://blog.ruthearle.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>I Go With Hugo</title>
      <link>http://blog.ruthearle.com/blog/igo-hugo/</link>
      <pubDate>Sat, 30 Apr 2016 14:04:32 +0100</pubDate>
      
      <guid>http://blog.ruthearle.com/blog/igo-hugo/</guid>
      <description>

&lt;p&gt;So I finally have my blog up and running. Part of the delay was that I could not find a platform with templates that I liked the other part was sheer laziness. Then I found &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hugo is written in Go and is blazingly fast at building static content. There are &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;beautiful templates&lt;/a&gt; to get you started and it was relatively easy to get everything onto Github.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://gohugo.io/&#34;&gt;website&lt;/a&gt; states&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;Hugo is quite possibly the easiest to install&amp;hellip;, simply download and run&amp;rsquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was true, but Hugo does not come prepackaged with a theme so when you run
&lt;code&gt;hugo server&lt;/code&gt; and go to &lt;code&gt;http://localhost:1313&lt;/code&gt; (default port) you are presented with a blank page or a page of XML if you have added content. Hmmm&amp;hellip;doc&amp;rsquo;s!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://gohugo.io/&#34;&gt;docs&lt;/a&gt; are thorough and covers most things but I could not &lt;a href=&#34;#css&#34;&gt;load css&lt;/a&gt;. I followed the tutorial but after much frustration I googled for another answer.&lt;/p&gt;

&lt;p&gt;So with the help of &lt;a href=&#34;https://gohugo.io/overview/quickstart#step-8-customize-robust-theme&#34;&gt;Hugo tutorial&lt;/a&gt; and &lt;a href=&#34;http://rajeshhegde.com/2016/09/set-up-hugo-with-github-pages/&#34;&gt;RH.io&lt;/a&gt; I came up with a workflow that got my blog onto &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github pages&lt;/a&gt; with a custom domain name (&lt;a href=&#34;#domain&#34;&gt;click here&lt;/a&gt; to see how to add a custom domain). Let&amp;rsquo;s go.&lt;/p&gt;

&lt;h3 id=&#34;install-hugo-mac:156fd0598bf9d0101e6451fcd0b080e6&#34;&gt;Install Hugo - Mac&lt;/h3&gt;

&lt;p&gt;Ensure you have Homebrew installed and run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update &amp;amp;&amp;amp; brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install Hugo on other OS&amp;rsquo;s follow instructions &lt;a href=&#34;https://gohugo.io/overview/installing/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;git-repo-s:156fd0598bf9d0101e6451fcd0b080e6&#34;&gt;Git repo&amp;rsquo;s&lt;/h3&gt;

&lt;p&gt;Hugo compiles your static site into a &lt;code&gt;public&lt;/code&gt; directory within the root. The good news is that we can configure the path to whatever directory you want.
Github pages will host static files from a repository that meets two conditions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The repository is named &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The repository includes a &lt;code&gt;index.html&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first thing to do is create two git repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;username&amp;gt;-hugo.git&lt;/code&gt; - the root of your Hugo site&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;username&amp;gt;.github.io.git&lt;/code&gt; - this will be used to house the compiled static pages for your site, which ordinarily would go in &lt;code&gt;/public&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Replace &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; with your github username.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;create-your-hugo-site:156fd0598bf9d0101e6451fcd0b080e6&#34;&gt;Create your Hugo site&lt;/h3&gt;

&lt;p&gt;On the command line run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~ $ hugo new site &amp;lt;username&amp;gt;-hugo
~ $ cd &amp;lt;username&amp;gt;-hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a page &lt;code&gt;hugo new about.md&lt;/code&gt;. This page will be created in the &lt;code&gt;/content&lt;/code&gt; directory. Complete this page with all the necessary information.&lt;/p&gt;

&lt;p&gt;Next add the &lt;code&gt;&amp;lt;username&amp;gt;-hugo.git&lt;/code&gt; repository remote address&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/&amp;lt;username&amp;gt;-hugo $ git init
~/&amp;lt;username&amp;gt;-hugo $ git remote add origin git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;-hugo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next add a submodule for the &lt;code&gt;&amp;lt;username&amp;gt;.git.io repository&lt;/code&gt; within your &lt;code&gt;&amp;lt;username&amp;gt;-hugo&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/&amp;lt;username&amp;gt;-hugo $ git submodule add origin git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;-github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point it might be a good idea to choose &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;a theme&lt;/a&gt;.  I found I had to install the theme as a submodule otherwise git complained:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/&amp;lt;username&amp;gt;-hugo $ mkdir themes &amp;amp;&amp;amp; cd themes
~/&amp;lt;username&amp;gt;-hugo/themes $ git submodule add https://github.com/appernetic/hugo-bootstrap-premium
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Follow the instructions for setting up your theme. This usually involves copying the themes config.toml/yaml/json to the root of your site directory.&lt;/p&gt;

&lt;h3 id=&#34;configuration-a-id-css-a:156fd0598bf9d0101e6451fcd0b080e6&#34;&gt;Configuration&lt;a id=&#34;css&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In the config.toml ensure you set the following parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;baseurl = &amp;quot;http://yourwebsite.com&amp;quot;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;set this to your github pages url e.g. &lt;code&gt;http://&amp;lt;username&amp;gt;.github.io&lt;/code&gt;. If you are going to use a &lt;a href=&#34;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&#34;&gt;custom domain name with github pages&lt;/a&gt; use that. The &lt;code&gt;baseurl&lt;/code&gt; parameter is used to set the hostname and path to the root. When you run your site locally with &lt;code&gt;hugo server&lt;/code&gt; the &lt;code&gt;baseurl&lt;/code&gt; parameter is overridden and set to &lt;code&gt;http://localhost:1313/&lt;/code&gt; so setting it to localhost will cause your website to be unnavigable when compiled.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonifyurls = true&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;this is used to set a relative path for your urls. Default is false.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publishdir = &amp;lt;username&amp;gt;.github.io&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;this parameter tells Hugo where to compile the static site. The default location is &lt;code&gt;/public&lt;/code&gt;. Setting this to your github site repo will make deploying your site a bit easier.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[params] customCSS/JS&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;set this parameter to &lt;code&gt;[default]&lt;/code&gt;, which will load the themes CSS. But do check the instructions for your chosen theme as it may employ a different strategy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The remaining parameters are going to be personal to you so &lt;a href=&#34;https://gohugo.io/overview/configuration/&#34;&gt;read the docs&lt;/a&gt; and get familiar with what the parameters do.&lt;/p&gt;

&lt;h3 id=&#34;check-the-site-locally:156fd0598bf9d0101e6451fcd0b080e6&#34;&gt;Check the site locally&lt;/h3&gt;

&lt;p&gt;Spin up the site with &lt;code&gt;hugo server&lt;/code&gt; and in your browser go to &lt;code&gt;http://localhost:1313&lt;/code&gt;. If everything looks super then it&amp;rsquo;s time to get the site live.&lt;/p&gt;

&lt;h3 id=&#34;build-and-deploy-a-id-domain-a:156fd0598bf9d0101e6451fcd0b080e6&#34;&gt;Build and deploy &lt;a id=&#34;domain&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Next build the static pages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/&amp;lt;username&amp;gt;-hugo/themes $ cd ../
~/&amp;lt;username&amp;gt;-hugo/ $ hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit and push these changes to git:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/&amp;lt;username&amp;gt;-hugo/ $ git add -A
~/&amp;lt;username&amp;gt;-hugo/ $ git commit -m &amp;quot;first commit&amp;quot;
~/&amp;lt;username&amp;gt;-hugo/ $ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;custom-domain:156fd0598bf9d0101e6451fcd0b080e6&#34;&gt;Custom domain&lt;/h5&gt;

&lt;p&gt;Adding a custom domain is as simple as creating a file with one line. Ensure you have added a CNAME record on your DNS and create a file in the root of your github pages directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/&amp;lt;username&amp;gt;-hugo/ $ cd &amp;lt;username&amp;gt;.git.io
~/&amp;lt;username&amp;gt;.git.io/ $ touch CNAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the newly created  &lt;code&gt;CNAME&lt;/code&gt; file and add your custom damain name at the top of the file, i.e. &lt;code&gt;blog.ruthearle.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You are now ready to push the static pages to git:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/&amp;lt;username&amp;gt;.git.io/ $ cd &amp;lt;username&amp;gt;.git.io
~/&amp;lt;username&amp;gt;.git.io/ $ git add -A
~/&amp;lt;username&amp;gt;.git.io/ $ git commit -m &amp;quot;first commit&amp;quot;
~/&amp;lt;username&amp;gt;.git.io/ $ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once all changes are pushed your site should be available to view at &lt;code&gt;&amp;lt;username&amp;gt;.git.io&lt;/code&gt; or your custom domain.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://blog.ruthearle.com/about/</link>
      <pubDate>Sat, 30 Apr 2016 10:00:26 +0100</pubDate>
      
      <guid>http://blog.ruthearle.com/about/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“If you want to learn something, read about it. If you want to understand something, write about it. If you want to master something, teach it.” —&lt;a href=&#34;http://kundaliniresearchinstitute.org/?page_id=560&#34;&gt;Yogi Bhajan&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The sole purpose of this blog is for me and anyone who cares to read it to become better programmers.&lt;/p&gt;

&lt;p&gt;But why another blog about programming? Why not just study whats out there already and hope that something sticks? Well, firstly, I want to test the truthyness of the axiom uttered by &lt;a href=&#34;http://kundaliniresearchinstitute.org/?page_id=560&#34;&gt;Yogi Bhajan&lt;/a&gt; (and many others), secondly to serve as a repository for things I have learned and deemed important enough to write down and remember, and lastly it is my attempt to try and silence the noise of my unhelpful, negative voice that insists on telling me that I am an Imposter. 
&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.ruthearle.com/img/profile/cartoonMe.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Me&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I am sure the last one is a red herring, because as I have learned:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt; growth = new_skill |&amp;gt; discomfort |&amp;gt; uncertainty |&amp;gt; lack_of_confidence |&amp;gt; imposter_syndrome
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>